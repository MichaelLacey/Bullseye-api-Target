{"ast":null,"code":"var _jsxFileName = \"/home/michaellacey/appacademy/Projects/Bullseye-api-Target/react-app/src/components/EditReview/index.js\",\n  _s = $RefreshSig$();\nimport './index.css';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function EditReview() {\n  _s();\n  const [comment, setComment] = useState('');\n  const [rating, setRating] = useState(1);\n  const [validationErrors, setValidationErrors] = useState([]);\n  const dispatch = useDispatch();\n  const {\n    reviewId\n  } = useParams();\n\n  // Grab user of the session\n  // let sessionUserId = useSelector(state => state.session.user.id);\n  const revsArr = Object.values(useSelector(state => state.Reviews));\n\n  // const reviewUserIds = revsArr.map(review => review.userId);\n  // let validationBoolean = false;\n\n  // for (let i = 0; i < reviewUserIds.length; i++) {\n  //     if (parseInt(sessionUserId) === parseInt(reviewUserIds[i])) {\n  //         validationBoolean = true\n  //     };\n  // };\n\n  // useEffect(() => {\n  //     const validationErrors = [];\n  //     if (!review && !validationBoolean) validationErrors.push('Please provide a lengthier review');\n  //     if (validationBoolean) validationErrors.push(\"You can't make two reviews for the same spot!\")\n  //     if (review.length > 1000) validationErrors.push('Please provide a review with less than 1000 characters');\n  //     setValidationErrors(validationErrors);\n  // }, [review, validationBoolean]);\n\n  // const handleSubmit = async (e) => {\n  // e.preventDefault();\n  // const review = {\n  // rating,\n  // comment\n  // };\n  // setComment('');\n  // setRating(1);\n\n  // let reviewDispatch = await dispatch();\n  // if (reviewDispatch) {\n\n  // get reviews again after we create review\n  // await dispatch(getReviewsThunk(spotId));\n  // await dispatch(getSpotByid(spotId));\n  // };\n  // };\n\n  return /*#__PURE__*/_jsxDEV(\"h1\", {\n    children: \"Hello \"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 9\n  }, this);\n}\n_s(EditReview, \"Sfi40F3KndHsL0nIIutRrPRHLFQ=\", false, function () {\n  return [useDispatch, useParams, useSelector];\n});\n_c = EditReview;\n;\nvar _c;\n$RefreshReg$(_c, \"EditReview\");","map":{"version":3,"names":["useEffect","useState","useParams","useDispatch","useSelector","EditReview","comment","setComment","rating","setRating","validationErrors","setValidationErrors","dispatch","reviewId","revsArr","Object","values","state","Reviews"],"sources":["/home/michaellacey/appacademy/Projects/Bullseye-api-Target/react-app/src/components/EditReview/index.js"],"sourcesContent":["import './index.css';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\n\n\nexport default function EditReview() {\n    const [comment, setComment] = useState('');\n    const [rating, setRating] = useState(1);\n    const [validationErrors, setValidationErrors] = useState([]);\n\n    const dispatch = useDispatch();\n    const { reviewId } = useParams();\n\n    // Grab user of the session\n    // let sessionUserId = useSelector(state => state.session.user.id);\n    const revsArr = Object.values(useSelector(state => state.Reviews));\n\n    // const reviewUserIds = revsArr.map(review => review.userId);\n    // let validationBoolean = false;\n\n    // for (let i = 0; i < reviewUserIds.length; i++) {\n    //     if (parseInt(sessionUserId) === parseInt(reviewUserIds[i])) {\n    //         validationBoolean = true\n    //     };\n    // };\n\n    // useEffect(() => {\n    //     const validationErrors = [];\n    //     if (!review && !validationBoolean) validationErrors.push('Please provide a lengthier review');\n    //     if (validationBoolean) validationErrors.push(\"You can't make two reviews for the same spot!\")\n    //     if (review.length > 1000) validationErrors.push('Please provide a review with less than 1000 characters');\n    //     setValidationErrors(validationErrors);\n    // }, [review, validationBoolean]);\n\n    // const handleSubmit = async (e) => {\n        // e.preventDefault();\n        // const review = {\n            // rating,\n            // comment\n        // };\n        // setComment('');\n        // setRating(1);\n\n        // let reviewDispatch = await dispatch();\n        // if (reviewDispatch) {\n        \n            // get reviews again after we create review\n            // await dispatch(getReviewsThunk(spotId));\n            // await dispatch(getSpotByid(spotId));\n        // };\n    // };\n\n    return (\n        <h1>Hello </h1>\n    ); \n};"],"mappings":";;AAAA,OAAO,aAAa;AACpB,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,SAAS,QAAQ,kBAAkB;AAC5C,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AAAC;AAGvD,eAAe,SAASC,UAAU,GAAG;EAAA;EACjC,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACO,MAAM,EAAEC,SAAS,CAAC,GAAGR,QAAQ,CAAC,CAAC,CAAC;EACvC,MAAM,CAACS,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAE5D,MAAMW,QAAQ,GAAGT,WAAW,EAAE;EAC9B,MAAM;IAAEU;EAAS,CAAC,GAAGX,SAAS,EAAE;;EAEhC;EACA;EACA,MAAMY,OAAO,GAAGC,MAAM,CAACC,MAAM,CAACZ,WAAW,CAACa,KAAK,IAAIA,KAAK,CAACC,OAAO,CAAC,CAAC;;EAElE;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACI;EACA;EACI;EACA;EACJ;EACA;EACA;;EAEA;EACA;;EAEI;EACA;EACA;EACJ;EACJ;;EAEA,oBACI;IAAA,UAAI;EAAM;IAAA;IAAA;IAAA;EAAA,QAAK;AAEvB;AAAC,GAlDuBb,UAAU;EAAA,QAKbF,WAAW,EACPD,SAAS,EAIAE,WAAW;AAAA;AAAA,KAVrBC,UAAU;AAkDjC;AAAC;AAAA"},"metadata":{},"sourceType":"module"}